name: Django CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  DB_HOST: postgres
  DB_PORT: "5432"
  DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
  DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
  DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
  DEBUG: "False"
  PORT: "8888"
  OIDC_OP_DOMAIN: ${{ secrets.OIDC_OP_DOMAIN }}
  OIDC_RP_CLIENT_ID: ${{ secrets.OIDC_RP_CLIENT_ID }}
  OIDC_RP_CLIENT_SECRET: ${{ secrets.OIDC_RP_CLIENT_SECRET }}

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Lint checks
        run: |
          flake8 .
          black --check . --config pyproject.toml
          isort . --check-only --settings-path pyproject.toml

  unit-tests:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: postgres

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          for i in {1..25}; do
            pg_isready -h $DB_HOST -p $DB_PORT -U $POSTGRES_USER && break
            echo "Postgres not ready yet... retrying ($i/25)"
            sleep 2
          done

      - name: Run migrations and create superuser
        run: |
          chmod +x ./migrate.sh
          ./migrate.sh

      - name: Run unit tests
        run: |
          coverage run -m pytest tests/unit -v
          coverage xml -o coverage-unit.xml

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-unit.xml
          flags: unit
          name: codecov-unit
          fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: postgres

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          for i in {1..25}; do
            pg_isready -h $DB_HOST -p $DB_PORT -U $POSTGRES_USER && break
            echo "Postgres not ready yet... retrying ($i/25)"
            sleep 2
          done

      - name: Run migrations and create superuser
        run: |
          chmod +x ./migrate.sh
          ./migrate.sh

      - name: Run integration tests
        run: |
          coverage run -m pytest tests/integration -v
          coverage xml -o coverage-integration.xml

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-integration.xml
          flags: integration
          name: codecov-integration
          fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/playwright/python:v1.40.0-jammy
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: postgres

    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-container-e2e-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-container-e2e-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          for i in {1..25}; do
            pg_isready -h $DB_HOST -p $DB_PORT -U $POSTGRES_USER && break
            echo "Postgres not ready yet... retrying ($i/25)"
            sleep 2
          done

      - name: Run migrations and create superuser
        run: |
          chmod +x ./migrate.sh
          ./migrate.sh

      - name: Run e2e tests
        run: |
          chmod +x ./runtests.sh
          coverage run -m pytest tests/e2e -v
          coverage xml -o coverage-e2e.xml
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0

      - name: Upload e2e test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-e2e.xml
          flags: e2e
          name: codecov-e2e
          fail_ci_if_error: false

  coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    steps:
      - name: Generate coverage summary
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "All test suites completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "Check individual job coverage reports for details." >> $GITHUB_STEP_SUMMARY

  docker:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: otizaaa/savannah_assess
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}