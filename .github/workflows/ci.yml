name: Django CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  DB_HOST: postgres
  DB_PORT: "5432"
  DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
  DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
  DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
  DEBUG: "False"
  PORT: "8888"
  OIDC_OP_DOMAIN: ${{ secrets.OIDC_OP_DOMAIN }}
  OIDC_RP_CLIENT_ID: ${{ secrets.OIDC_RP_CLIENT_ID }}
  OIDC_RP_CLIENT_SECRET: ${{ secrets.OIDC_RP_CLIENT_SECRET }}

jobs:
  unit_integration_tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint checks
        run: |
          flake8 .
          black --check . --config pyproject.toml
          isort . --check-only --settings-path pyproject.toml

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h $DB_HOST -p $DB_PORT -U $POSTGRES_USER && break
            echo "Postgres not ready yet... retrying ($i/30)"
            sleep 1
          done

      - name: Run migrations and create superuser
        run: |
          chmod +x ./migrate.sh
          ./migrate.sh

      - name: Run Unit & Integration Tests
        run: |
          chmod +x ./runtests.sh
          coverage run -m pytest tests/unit tests/integration -v
          coverage xml -o coverage_unit_integration.xml
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0

  e2e_tests:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/playwright/python:v1.40.0-jammy
    needs: unit_integration_tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install --with-deps chromium

      - name: Run E2E Tests
        run: |
          chmod +x ./runtests.sh
          coverage run --append -m pytest tests/e2e -v
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0

      - name: Upload E2E coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage_unit_integration.xml
          flags: e2e
          fail_ci_if_error: false

  docker_build:
    runs-on: ubuntu-latest
    needs: [unit_integration_tests, e2e_tests]

    steps:
      - uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: otizaaa/savannah_assess
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
