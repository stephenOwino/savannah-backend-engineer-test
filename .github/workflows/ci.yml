name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DB_HOST: postgres
      DB_PORT: "5432"
      DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
      DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
      DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
      DEBUG: "False"
      PORT: "8888"

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Debug environment variables
        run: |
          echo "POSTGRES_DB=$POSTGRES_DB"
          echo "POSTGRES_USER=$POSTGRES_USER"
          echo "DB_HOST=$DB_HOST"
          echo "DB_PORT=$DB_PORT"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          echo "Checking Postgres container status..."
          docker ps -f "ancestor=postgres:latest"
          for i in {1..30}; do
            if pg_isready -h $DB_HOST -p $DB_PORT -U $POSTGRES_USER; then
              echo "Postgres is ready!"
              exit 0
            fi
            echo "Waiting for Postgres... (attempt $i/30)"
            pg_isready -h $DB_HOST -p $DB_PORT -U $POSTGRES_USER 2>&1 || echo "pg_isready failed with exit code $?"
            sleep 2
          done
          echo "Error: Postgres not ready after 60 seconds"
          echo "Postgres container logs:"
          docker logs $(docker ps -qf "ancestor=postgres:latest")
          echo "Postgres container status:"
          docker ps -f "ancestor=postgres:latest")
          exit 1

      - name: Debug Postgres logs if failure
        if: failure()
        run: docker logs $(docker ps -qf "ancestor=postgres:latest")

      - name: Run migrations and create superuser
        run: ./migration.sh

      - name: Collect static files
        run: python manage.py collectstatic --noinput

      - name: Lint with flake8
        run: flake8 .

      - name: Check formatting with black
        run: black --check .

      - name: Check imports with isort
        run: isort . --check-only