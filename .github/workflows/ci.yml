name: Django CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest
    
    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DB_HOST: localhost
      DB_PORT: "5432"
      DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
      DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
      DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
      DEBUG: "False"
      PORT: "8888"
      OIDC_OP_DOMAIN: ${{ secrets.OIDC_OP_DOMAIN }}
      OIDC_RP_CLIENT_ID: ${{ secrets.OIDC_RP_CLIENT_ID }}
      OIDC_RP_CLIENT_SECRET: ${{ secrets.OIDC_RP_CLIENT_SECRET }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint checks
        run: |
          flake8 .
          black --check . --config pyproject.toml
          isort . --check-only --settings-path pyproject.toml

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h $DB_HOST -p $DB_PORT -U $POSTGRES_USER && break
            echo "Postgres not ready yet... retrying ($i/30)"
            sleep 1
          done

      - name: Run migrations and create superuser
        run: |
          chmod +x ./migrate.sh
          ./migrate.sh

      # Run unit/API tests first (faster feedback) - exclude e2e directory entirely

      - name: Run unit and API tests
        run: |
         export DJANGO_SETTINGS_MODULE=savannah_assess.settings
         PYTHONPATH=$PWD pytest -v --tb=short --cov=api --cov-report=xml --cov-report=term-missing --ignore=e2e/



      # Install Playwright only for E2E tests
      - name: Install Playwright browsers
        run: playwright install --with-deps chromium

      # Run E2E tests separately
      - name: Run E2E tests
        run: pytest e2e/ -v --tb=short
        env:
          # Run headless in CI
          PLAYWRIGHT_BROWSERS_PATH: 0

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: api-tests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage summary
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY || echo "Coverage report generation failed" >> $GITHUB_STEP_SUMMARY

  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            otizaaa/savannah_assess:v2